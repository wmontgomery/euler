/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

// Build out the sequence into an array,
// Run a map on that to get the sumnation of it

const addToSequence = ([first, last]) => first + last

const buildSequence = (fib, maxInSequence) => {
  const last = fib[fib.length - 1]
  const secondLast = fib[fib.length - 2]
  const nextInSequence = addToSequence([secondLast, last])

  if (nextInSequence > maxInSequence) {
    return fib
  }

  fib.push(nextInSequence)

  return buildSequence(fib, maxInSequence)
}

const myFibs = buildSequence([1, 2], 4000000)

const evenMahFibs = fib => 
  fib.reduce((acc, currVal) => {
    return currVal % 2 === 0 ? acc + currVal : acc + 0
  }, 0)

console.log(myFibs)
console.log(evenMahFibs(myFibs))
